{"ast":null,"code":"var _jsxFileName = \"/Users/dmarr/Desktop/NucampFolder/3-React/quiz-app/starter/src/App.js\";\nimport React, { Component, useState } from \"react\";\nimport { QUESTIONS } from './shared/questions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: QUESTIONS\n    };\n  }\n\n  render() {\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n\n    const handleAnsClick = isCorrect => {\n      if (isCorrect) {\n        setScore(score + 1);\n      }\n\n      const nextQuestion = currentQuestion + 1;\n\n      if (nextQuestion < this.state.questions.length) {\n        setCurrentQuestion(nextQuestion);\n      } else {\n        setShowScore(true);\n      }\n\n      ;\n    };\n\n    const [score, setScore] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    /*const questions = [\n      {\n        // id: 0,\n        questionText: \"What is the capital of France?\",\n        answerOptions: [\n          { answerText: \"New York\", isCorrect: false },\n          { answerText: \"London\", isCorrect: false },\n          { answerText: \"Paris\", isCorrect: true },\n          { answerText: \"Dublin\", isCorrect: false },\n        ],\n      },\n      {\n        // id: 1,\n        questionText: \"Who is CEO of Tesla?\",\n        answerOptions: [\n          { answerText: \"Jeff Bezos\", isCorrect: false },\n          { answerText: \"Elon Musk\", isCorrect: true },\n          { answerText: \"Bill Gates\", isCorrect: false },\n          { answerText: \"Tony Stark\", isCorrect: false },\n        ],\n      },\n      {\n        // id: 2,\n        questionText: \"The iPhone was created by which company?\",\n        answerOptions: [\n          { answerText: \"Apple\", isCorrect: true },\n          { answerText: \"Intel\", isCorrect: false },\n          { answerText: \"Amazon\", isCorrect: false },\n          { answerText: \"Microsoft\", isCorrect: false },\n        ],\n      },\n      {\n        // id: 3,\n        questionText: \"How many Harry Potter books are there?\",\n        answerOptions: [\n          { answerText: \"1\", isCorrect: false },\n          { answerText: \"4\", isCorrect: false },\n          { answerText: \"6\", isCorrect: false },\n          { answerText: \"7\", isCorrect: true },\n        ],\n      },\n    ]; */\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"score-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, \"You scored \", score, \" out of \", this.state.questions.length, \".\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"Question \", currentQuestion + 1), \"/\", this.state.questions.length), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, this.state.questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => handleAnsClick(answerOption.isCorrect),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, answerOption.answerText)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dmarr/Desktop/NucampFolder/3-React/quiz-app/starter/src/App.js"],"names":["React","Component","useState","QUESTIONS","App","constructor","props","state","questions","render","currentQuestion","setCurrentQuestion","handleAnsClick","isCorrect","setScore","score","nextQuestion","length","setShowScore","showScore","questionText","answerOptions","map","answerOption","index","answerText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAEL;AADF,KAAb;AAGD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,CAAD,CAAtD;;AACA,UAAMU,cAAc,GAAIC,SAAD,IAAe;AACpC,UAAIA,SAAJ,EAAe;AACbC,QAAAA,QAAQ,CAACC,KAAK,GAAG,CAAT,CAAR;AACD;;AACD,YAAMC,YAAY,GAAGN,eAAe,GAAG,CAAvC;;AACA,UAAIM,YAAY,GAAE,KAAKT,KAAL,CAAWC,SAAX,CAAqBS,MAAvC,EAA+C;AAC/CN,QAAAA,kBAAkB,CAACK,YAAD,CAAlB;AACC,OAFD,MAEO;AACLE,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAAA;AACF,KAVD;;AAWA,UAAM,CAACH,KAAD,EAAQD,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AACA,UAAM,CAACiB,SAAD,EAAYD,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGiB,SAAS,gBACR;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACcJ,KADd,cAC6B,KAAKR,KAAL,CAAWC,SAAX,CAAqBS,MADlD,MADQ,gBAKR,uDACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBP,eAAe,GAAG,CAAlC,CADF,OAC+C,KAAKH,KAAL,CAAWC,SAAX,CAAqBS,MADpE,CADF,eAIE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC,KAAKV,KAAL,CAAWC,SAAX,CAAqBE,eAArB,EAAsCU,YAAtE,CAJF,CADF,eAOE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,SAAS,CAACE,eAAD,CAAT,CAA2BW,aAA3B,CAAyCC,GAAzC,CAA6C,CAACC,YAAD,EAAeC,KAAf,kBAC5C;AAAQ,MAAA,OAAO,EAAE,MAAMZ,cAAc,CAACW,YAAY,CAACV,SAAd,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgEU,YAAY,CAACE,UAA7E,CADD,CADH,CAPF,CARJ,CADF;AAyBD;;AA3FyB;;AA8F5B,eAAerB,GAAf","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { QUESTIONS } from './shared/questions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        questions: QUESTIONS,\n    };\n  }\n\n  render() {\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const handleAnsClick = (isCorrect) => {\n      if (isCorrect) {\n        setScore(score + 1);\n      }\n      const nextQuestion = currentQuestion + 1;\n      if (nextQuestion <this.state.questions.length) {\n      setCurrentQuestion(nextQuestion);\n      } else {\n        setShowScore(true);\n      };\n    }\n    const [score, setScore] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    /*const questions = [\n      {\n        // id: 0,\n        questionText: \"What is the capital of France?\",\n        answerOptions: [\n          { answerText: \"New York\", isCorrect: false },\n          { answerText: \"London\", isCorrect: false },\n          { answerText: \"Paris\", isCorrect: true },\n          { answerText: \"Dublin\", isCorrect: false },\n        ],\n      },\n      {\n        // id: 1,\n        questionText: \"Who is CEO of Tesla?\",\n        answerOptions: [\n          { answerText: \"Jeff Bezos\", isCorrect: false },\n          { answerText: \"Elon Musk\", isCorrect: true },\n          { answerText: \"Bill Gates\", isCorrect: false },\n          { answerText: \"Tony Stark\", isCorrect: false },\n        ],\n      },\n      {\n        // id: 2,\n        questionText: \"The iPhone was created by which company?\",\n        answerOptions: [\n          { answerText: \"Apple\", isCorrect: true },\n          { answerText: \"Intel\", isCorrect: false },\n          { answerText: \"Amazon\", isCorrect: false },\n          { answerText: \"Microsoft\", isCorrect: false },\n        ],\n      },\n      {\n        // id: 3,\n        questionText: \"How many Harry Potter books are there?\",\n        answerOptions: [\n          { answerText: \"1\", isCorrect: false },\n          { answerText: \"4\", isCorrect: false },\n          { answerText: \"6\", isCorrect: false },\n          { answerText: \"7\", isCorrect: true },\n        ],\n      },\n    ]; */\n\n    return (\n      <div className=\"app\">\n        {/* HINT: replace \"false\" with logic to display the \n        score when the user has answered all the questions */}\n        {showScore ? (\n          <div className=\"score-section\">\n            You scored {score} out of {this.state.questions.length}.\n          </div>\n        ) : (\n          <>\n            <div className=\"question-section\">\n              <div className=\"question-count\">\n                <span>Question {currentQuestion + 1}</span>/{this.state.questions.length}\n              </div>\n              <div className=\"question-text\">{this.state.questions[currentQuestion].questionText}</div>\n            </div>\n            <div className=\"answer-section\">\n              {questions[currentQuestion].answerOptions.map((answerOption, index) => (\n                <button onClick={() => handleAnsClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}