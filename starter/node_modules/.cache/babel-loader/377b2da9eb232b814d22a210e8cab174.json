{"ast":null,"code":"var _jsxFileName = \"/Users/dmarr/Desktop/NucampFolder/3-React/quiz-app/starter/src/App.js\";\nimport React, { Component, useState } from \"react\";\nexport default function App(props) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  const handleAnsClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  /*const questions = [\n    {\n      // id: 0,\n      questionText: \"What is the capital of France?\",\n      answerOptions: [\n        { answerText: \"New York\", isCorrect: false },\n        { answerText: \"London\", isCorrect: false },\n        { answerText: \"Paris\", isCorrect: true },\n        { answerText: \"Dublin\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 1,\n      questionText: \"Who is CEO of Tesla?\",\n      answerOptions: [\n        { answerText: \"Jeff Bezos\", isCorrect: false },\n        { answerText: \"Elon Musk\", isCorrect: true },\n        { answerText: \"Bill Gates\", isCorrect: false },\n        { answerText: \"Tony Stark\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 2,\n      questionText: \"The iPhone was created by which company?\",\n      answerOptions: [\n        { answerText: \"Apple\", isCorrect: true },\n        { answerText: \"Intel\", isCorrect: false },\n        { answerText: \"Amazon\", isCorrect: false },\n        { answerText: \"Microsoft\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 3,\n      questionText: \"How many Harry Potter books are there?\",\n      answerOptions: [\n        { answerText: \"1\", isCorrect: false },\n        { answerText: \"4\", isCorrect: false },\n        { answerText: \"6\", isCorrect: false },\n        { answerText: \"7\", isCorrect: true },\n      ],\n    },\n  ]; */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"You scored \", score, \" out of \", questions.length, \".\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAnsClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, answerOption.answerText)))));\n}","map":{"version":3,"sources":["/Users/dmarr/Desktop/NucampFolder/3-React/quiz-app/starter/src/App.js"],"names":["React","Component","useState","App","props","currentQuestion","setCurrentQuestion","handleAnsClick","isCorrect","setScore","score","nextQuestion","questions","length","setShowScore","showScore","questionText","answerOptions","map","answerOption","index","answerText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAIA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AACjC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCJ,QAAQ,CAAC,CAAD,CAAtD;;AACA,QAAMK,cAAc,GAAIC,SAAD,IAAe;AACpC,QAAIA,SAAJ,EAAe;AACbC,MAAAA,QAAQ,CAACC,KAAK,GAAG,CAAT,CAAR;AACD;;AACD,UAAMC,YAAY,GAAGN,eAAe,GAAG,CAAvC;;AACA,QAAIM,YAAY,GAAEC,SAAS,CAACC,MAA5B,EAAoC;AACpCP,MAAAA,kBAAkB,CAACK,YAAD,CAAlB;AACC,KAFD,MAEO;AACLG,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAVD;;AAWA,QAAM,CAACJ,KAAD,EAAQD,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACa,SAAD,EAAYD,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGa,SAAS,gBACR;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACcL,KADd,cAC6BE,SAAS,CAACC,MADvC,MADQ,gBAKR,uDACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBR,eAAe,GAAG,CAAlC,CADF,OAC+CO,SAAS,CAACC,MADzD,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCD,SAAS,CAACP,eAAD,CAAT,CAA2BW,YAA3D,CAJF,CADF,eAOE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,SAAS,CAACP,eAAD,CAAT,CAA2BY,aAA3B,CAAyCC,GAAzC,CAA6C,CAACC,YAAD,EAAeC,KAAf,kBAC5C;AAAQ,IAAA,OAAO,EAAE,MAAMb,cAAc,CAACY,YAAY,CAACX,SAAd,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgEW,YAAY,CAACE,UAA7E,CADD,CADH,CAPF,CARJ,CADF;AAyBD","sourcesContent":["import React, { Component, useState } from \"react\";\n\n\n\nexport default function App(props) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const handleAnsClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion <questions.length) {\n    setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  }\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  /*const questions = [\n    {\n      // id: 0,\n      questionText: \"What is the capital of France?\",\n      answerOptions: [\n        { answerText: \"New York\", isCorrect: false },\n        { answerText: \"London\", isCorrect: false },\n        { answerText: \"Paris\", isCorrect: true },\n        { answerText: \"Dublin\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 1,\n      questionText: \"Who is CEO of Tesla?\",\n      answerOptions: [\n        { answerText: \"Jeff Bezos\", isCorrect: false },\n        { answerText: \"Elon Musk\", isCorrect: true },\n        { answerText: \"Bill Gates\", isCorrect: false },\n        { answerText: \"Tony Stark\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 2,\n      questionText: \"The iPhone was created by which company?\",\n      answerOptions: [\n        { answerText: \"Apple\", isCorrect: true },\n        { answerText: \"Intel\", isCorrect: false },\n        { answerText: \"Amazon\", isCorrect: false },\n        { answerText: \"Microsoft\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 3,\n      questionText: \"How many Harry Potter books are there?\",\n      answerOptions: [\n        { answerText: \"1\", isCorrect: false },\n        { answerText: \"4\", isCorrect: false },\n        { answerText: \"6\", isCorrect: false },\n        { answerText: \"7\", isCorrect: true },\n      ],\n    },\n  ]; */\n\n  return (\n    <div className=\"app\">\n      {/* HINT: replace \"false\" with logic to display the \n      score when the user has answered all the questions */}\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {questions.length}.\n        </div>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].questionText}</div>\n          </div>\n          <div className=\"answer-section\">\n            {questions[currentQuestion].answerOptions.map((answerOption, index) => (\n              <button onClick={() => handleAnsClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}