{"ast":null,"code":"var _jsxFileName = \"/Users/dmarr/Desktop/NucampFolder/3-React/quiz-app/starter/src/App.js\";\nimport React, { Component, useState } from \"react\";\nimport { QUESTIONS } from './shared/questions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: QUESTIONS\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, \" Place score here to display the entire time! \"), /*#__PURE__*/React.createElement(RenderQuiz, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nfunction RenderQuiz({\n  props\n}) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  const handleAnsClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n\n    ;\n  };\n\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  /*const questions = [\n    {\n      // id: 0,\n      questionText: \"What is the capital of France?\",\n      answerOptions: [\n        { answerText: \"New York\", isCorrect: false },\n        { answerText: \"London\", isCorrect: false },\n        { answerText: \"Paris\", isCorrect: true },\n        { answerText: \"Dublin\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 1,\n      questionText: \"Who is CEO of Tesla?\",\n      answerOptions: [\n        { answerText: \"Jeff Bezos\", isCorrect: false },\n        { answerText: \"Elon Musk\", isCorrect: true },\n        { answerText: \"Bill Gates\", isCorrect: false },\n        { answerText: \"Tony Stark\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 2,\n      questionText: \"The iPhone was created by which company?\",\n      answerOptions: [\n        { answerText: \"Apple\", isCorrect: true },\n        { answerText: \"Intel\", isCorrect: false },\n        { answerText: \"Amazon\", isCorrect: false },\n        { answerText: \"Microsoft\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 3,\n      questionText: \"How many Harry Potter books are there?\",\n      answerOptions: [\n        { answerText: \"1\", isCorrect: false },\n        { answerText: \"4\", isCorrect: false },\n        { answerText: \"6\", isCorrect: false },\n        { answerText: \"7\", isCorrect: true },\n      ],\n    },\n  ]; */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"You scored \", score, \" out of \", questions.length, \".\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/4\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, questions[currentQuestion].answerOptions.map((answerOption, index) => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAnsClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, answerOption.answerText)))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dmarr/Desktop/NucampFolder/3-React/quiz-app/starter/src/App.js"],"names":["React","Component","useState","QUESTIONS","App","constructor","props","state","questions","render","RenderQuiz","currentQuestion","setCurrentQuestion","handleAnsClick","isCorrect","setScore","score","nextQuestion","length","setShowScore","showScore","questionText","answerOptions","map","answerOption","index","answerText"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport { QUESTIONS } from './shared/questions';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        questions: QUESTIONS,\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div> Place score here to display the entire time! </div>\n        < RenderQuiz />\n      </React.Fragment>\n    )\n  }\n}\n\nfunction RenderQuiz({props}) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const handleAnsClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion <questions.length) {\n    setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    };\n  }\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  /*const questions = [\n    {\n      // id: 0,\n      questionText: \"What is the capital of France?\",\n      answerOptions: [\n        { answerText: \"New York\", isCorrect: false },\n        { answerText: \"London\", isCorrect: false },\n        { answerText: \"Paris\", isCorrect: true },\n        { answerText: \"Dublin\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 1,\n      questionText: \"Who is CEO of Tesla?\",\n      answerOptions: [\n        { answerText: \"Jeff Bezos\", isCorrect: false },\n        { answerText: \"Elon Musk\", isCorrect: true },\n        { answerText: \"Bill Gates\", isCorrect: false },\n        { answerText: \"Tony Stark\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 2,\n      questionText: \"The iPhone was created by which company?\",\n      answerOptions: [\n        { answerText: \"Apple\", isCorrect: true },\n        { answerText: \"Intel\", isCorrect: false },\n        { answerText: \"Amazon\", isCorrect: false },\n        { answerText: \"Microsoft\", isCorrect: false },\n      ],\n    },\n    {\n      // id: 3,\n      questionText: \"How many Harry Potter books are there?\",\n      answerOptions: [\n        { answerText: \"1\", isCorrect: false },\n        { answerText: \"4\", isCorrect: false },\n        { answerText: \"6\", isCorrect: false },\n        { answerText: \"7\", isCorrect: true },\n      ],\n    },\n  ]; */\n\n  return (\n    <div className=\"app\">\n      {/* HINT: replace \"false\" with logic to display the \n      score when the user has answered all the questions */}\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {questions.length}.\n        </div>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/4\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].questionText}</div>\n          </div>\n          <div className=\"answer-section\">\n            {questions[currentQuestion].answerOptions.map((answerOption, index) => (\n              <button onClick={() => handleAnsClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}